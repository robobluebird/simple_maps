<script>
  let loc;
  let map;
  let img;
  let box;
  let socket;
  let msgs;
  let imgs;
  let bits;
  let wider;
  let bin;
  let lin;
  let linker;
  let pinKey = null;
  let pinName = null;
  let linkedPin;
</script>

<div class="box">
  <div id="linker" class="hidden">
    <div>
      <a id="back-to-msgs" class="pointer" onclick="backToMsgs()">back</a>
    </div>
    <input
      type="text"
      id="location-search"
      class="sidebar-text-input"
      placeholder="type to find location" />
    <div id="locations"></div>
  </div>
  <div class="msgs hidden">
    <div class="msgs-title"></div>
    <div id="link-info"></div>
    <a id="link" class="pointer">
      link a location
    </a>
    <textarea
      rows="1"
      class="sidebar-text-input"
      id="bit-input"
      placeholder="leave a comment (hit Enter to submit it)"></textarea>
    <div class="bits">
    </div>
  </div>
  <div class="imgs">
    <div id="back-link" class="hidden">
    </div>
    <img class="wide" id="img" src="<%= @url %>"></img>
  </div>
</div>

<div class="pin template">
  <div class="inner-rectangle">
    <span class="words">asdfasfdasdfasdf</span>
    <input class="name-input inactive" type="text" placeholder="name..." />
  </div>
  <div class="outer-triangle">
  </div>
  <div class="inner-triangle">
  </div>
</div>

<script type="text/javascript" src="/javascripts/guid.js"></script>
<script>
  window.onload = function() {
    let locationId = "<%= @location.id %>";
    let mapId = "<%= @map.id %>";
    
    getMap(locationId, mapId, function(fetched) {
      loc = fetched.location;
      map = fetched.map;
      linkedPin = fetched.linked_pin;

      console.log(linkedPin);

      if (!map.pins) {
        map.pins = [];
      }

      map.pins.forEach(function(p) {
        if (!p.bits) {
          p.bits = [];
        }
      });
      
      box = document.body.querySelector(".box");
      imgs = box.querySelector(".imgs");
      img = imgs.querySelector("#img");
      msgs = box.querySelector(".msgs");
      bits = msgs.querySelector(".bits");
      bin = msgs.querySelector("#bit-input");
      linker = box.querySelector("#linker");
      lin = linker.querySelector("#location-search");

      img.addEventListener('click', (event) => {
        let maps = JSON.parse(localStorage.getItem('simpleMaps'));

        if (!maps) {
          maps = initializeMapStorage();
        }

        let sMap = maps[map.id];

        if (!sMap) {
          let key = Guid.newGuid();

          sMap = {
            key: key,
            name: null
          };

          maps[map.id] = sMap;

          localStorage.setItem('simpleMaps', JSON.stringify(maps));
        }

        let currentPin = imgs.querySelector('#pin_' + sMap.key);

        drawPin(event, sMap.key, sMap.name, currentPin);
      });

      socket = new WebSocket("<%= @ws_url %>");

      socket.addEventListener('open', function (event) {
        console.log("ws...g2g!");
      });

      socket.addEventListener('message', function (event) {
        console.log(event);
        
        let data = JSON.parse(event.data);

        if (data.location && data.map) {
          loc = data.location;
          map = data.map;

          if (!map.pins) {
            map.pins = [];
          }

          map.pins.forEach(function(p) {
            if (!p.bits) {
              p.bits = [];
            }
          });
          
          dropPins();
        }
      });
      
      // When the window is resized re-layout the image and pins.
      // Hasn't yet caused performance issues...
      // Necessary because the pins are placed with absolute positioning
      window.onresize = fit;

      // layout everything for the first time
      fit();
      
      // If the location we loaded is linked to by a pin, construct a link
      // to that location.
      if (linkedPin) {
        let backLink = imgs.querySelector("#back-link");
        backLink.innerHTML =
          `<a href="/locations/${linkedPin.map.location.id}/maps/${linkedPin.map.id}?pin=${linkedPin.key}">${linkedPin.map.location.name}</a>`;
        backLink.classList.remove("hidden");
      }

      // Check query params. If there is a "pin" key it means we
      // want to open up the comments box for that pin
      let params = (new URL(document.location)).searchParams;
      if (params.has("pin")) {
        let pinId = `#pin_${params.get("pin")}`;
        let toClick = imgs.querySelector(pinId);

        if (toClick) {
          toClick.click();
        }
      }
    });
  };

  function backToMsgs() {
    linker.classList.add("hidden");
    msgs.classList.remove("hidden");
    lin.removeEventListener("keyup", searchForLocation, true);
  }

  let linkInputTimerId = null;

  function searchForLocation(keyupEvent) {
    if (linkInputTimerId) {
      window.clearTimeout(linkInputTimerId);
      linkInputTimerId = null;
    }

    linkInputTimerId = window.setTimeout(() => {
      search(keyupEvent.target.value, replaceSearchResults);
    }, 1000);
  }

  function search(term, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "/locations?q=" + escape(term));
    xhr.setRequestHeader("Accept", "application/json");
    xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest");
    xhr.onreadystatechange = function() {
      if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
        let locations = JSON.parse(this.response);
        callback(locations);
      }
    }
    xhr.send();
  }

  function replaceSearchResults(results) {
    let searchResults = linker.querySelector("#locations");

    while (searchResults.firstChild) {
      searchResults.removeChild(searchResults.firstChild);
    }

    results.forEach((result) => {
      let resultDiv = document.createElement("div");
      resultDiv.classList.add("bit", "pointer");
      resultDiv.appendChild(document.createTextNode(result.name));
      if (result.linked_pin) {
        resultDiv.classList.add("struck");
      } else {
        resultDiv.addEventListener("click", (e) => {
          var xhr = new XMLHttpRequest();
          xhr.open("POST", "/locations/" + loc.id + "/maps/" + map.id + "/pins", true);
          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          xhr.onreadystatechange = function() { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
              setLinkInfo(result.name, result.id);
              backToMsgs();
              while (searchResults.firstChild) {
                searchResults.removeChild(searchResults.firstChild);
              }
              lin.value = "";
            }
          }
          xhr.send("name=" + pinName + "&key=" + pinKey + "&linked_location_id=" + result.id);
        });
      }
      searchResults.appendChild(resultDiv);
    });
  }

  function setLinkInfo(name, id) {
    let linkInfo = msgs.querySelector("#link-info"); 
    linkInfo.innerHTML = `linked to: <a href="/locations/${id}">${name}</a>`;
    let linkLink = msgs.querySelector("#link");
    linkLink.textContent = "link a different location";
  }

  function startLinking(e) {
    e.preventDefault();
    e.stopPropagation();
    msgs.classList.add("hidden");
    linker.classList.remove("hidden");
    lin.addEventListener("keyup", searchForLocation, true);
    lin.focus();
  }
  
  function fit() {
    if (window.innerWidth > window.innerHeight) {
      box.classList.remove("tall");
      box.classList.add("wide");
      msgs.classList.remove("tall");
      msgs.classList.add("wide");
      linker.classList.remove("tall");
      linker.classList.add("wide");
    } else {
      box.classList.remove("wide");
      box.classList.add("tall");
      msgs.classList.remove("wide");
      msgs.classList.add("tall");
      linker.classList.remove("wide");
      linker.classList.add("tall");
    }

    dropPins();
  }
  
  function getMap(locationId, mapId, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "/locations/" + locationId + "/maps/" + mapId);
    xhr.setRequestHeader("Accept", "application/json");
    xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest");
    xhr.onreadystatechange = function() {
      if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
        callback(JSON.parse(this.response));
      }
    }
    xhr.send();
  }

  function nudge(pin, y = true) {
    let words = pin.querySelector('.words');
    let outerTriangle = pin.querySelector('.outer-triangle');
    let innerTriangle = pin.querySelector('.inner-triangle');

    let pinPos = pin.getBoundingClientRect();
    let triPos = outerTriangle.getBoundingClientRect();
    let driPos = innerTriangle.getBoundingClientRect();
    
    let pinLeft = parseFloat(pin.style.left.slice(0, -2));
    let pinTop = parseFloat(pin.style.top.slice(0, -2));
    let triLeft = parseFloat(outerTriangle.style.left.slice(0, -2));

    if (y) {
      pin.style.top = (pinTop - (pinPos.height + triPos.height)) + "px";
      pin.style.left = (pinLeft - (pinPos.width / 2)) + "px";
    } else {
      pin.style.left = ((triLeft + (triPos.width / 2)) - (pinPos.width / 2)) + "px";
    }

    outerTriangle.style.left = ((pinPos.width / 2) - (triPos.width / 2)) + "px"
    outerTriangle.style.top = pinPos.height - 1 + "px";
    innerTriangle.style.left = ((pinPos.width / 2) - (driPos.width / 2)) + "px"
    innerTriangle.style.top = pinPos.height - 2 + "px";
  }

  function pinPos(pin) {
    let outerTriangle = pin.querySelector('.outer-triangle');
    let pinPos = pin.getBoundingClientRect();
    let triPos = outerTriangle.getBoundingClientRect();

    return {
      x: pinPos.x + (pinPos.width / 2),
      y: pinPos.top + (pinPos.height + triPos.height)
    };
  }

  function drawPin(event, key, name, pin, persist = true) {
    let xPercent;
    let yPercent;
    let left;
    let top;

    if (event.trueX && event.trueY) {
      xPercent = event.trueX;
      yPercent = event.trueY;
      console.log("trueX");
      console.log(xPercent);
      console.log(yPercent);
    } else {
      xPercent = event.offsetX / img.width;
      yPercent = event.offsetY  / img.height;
      console.log("offsetX");
      console.log(xPercent);
      console.log(yPercent);
    }

    if (pin && name) {
      if (!persist) {
        console.log("not persisting...");
        return;
      } else {
        console.log("persisting!");
      }

      sned(key, name, xPercent, yPercent, null, null, null, function(response) {
        share();
      });
    } else {
      if (name) {
        if (!persist) {
          console.log("not persisting...");
          return;
        } else {
          console.log("persisting!");
        }

        sned(key, name, xPercent, yPercent, null, null, null, function(response) {
          share();
        });
      } else {
        console.log("naming...");

        pin = imgs.querySelector("#pin_" + key);

        if (pin) {
          pin.remove();
        }

        pin = document.body.querySelector('.pin.template').cloneNode(true);

        let words = pin.querySelector('.words');
        while (words.firstChild) {
          words.removeChild(words.firstChild);
        }
        words.style.display = "none";

        pin.classList.remove("template");
        pin.id = 'pin_' + key; 
        pin.style.width = "200px";
        pin.style.display = "block";

        left = (window.scrollX + img.width * xPercent) + "px";
        top = (window.scrollY + img.height * yPercent) + "px";

        pin.style.left = left;
        pin.style.top = top;

        let input = pin.querySelector('input');

        let keyup = function(keyupEvent) {
          let name = keyupEvent.target.value;

          if (keyupEvent.code == "Enter") {
            if (name.length > 0) {
              sned(key, name, xPercent, yPercent, null, null, null, function(response) {
                store({ name: name });
                share();
              });
            }
          }
        };

        input.addEventListener("keyup", keyup, true);
        input.classList.remove("inactive");
        imgs.appendChild(pin);
        input.focus();
        nudge(pin);
      }
    }
  }

  function sned(key, name, x, y, comment, commentKey, commentName, callback) {
    if (x && y) {
      // optimistically drop pins to keep things snappy

      let pin = map.pins.find(function(pin) {
        return pin.key === key;
      });
      
      if (pin) {
        pin.x = x;
        pin.y = y;
        pin.name = name;
      }
      
      dropPins();
    }
    
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "/locations/" + loc.id + "/maps/" + map.id + "/pins", true);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.onreadystatechange = function() { // Call a function when the state changes.
      if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
        let response = JSON.parse(this.response);
        
        loc = response.location;
        map = response.map;

        if (!map.pins) {
          map.pins = [];
        }

        map.pins.forEach(function(p) {
          if (!p.bits) {
            p.bits = [];
          }
        });
        
        // inefficient with the current state of drawPin BUT it's a test
        dropPins();
        
        callback(response);
      }
    }
    
    let params = "name=" + name + "&key=" + key;
    
    if (x && y) {
      params += ("&x=" + x + "&y=" + y);
    } else if (comment) {
      params += ("&comment=" + comment + "&comment_key=" + commentKey + "&comment_name=" + commentName);
    } else {
      throw new Error("you really messed up here");
    }
    
    xhr.send(params);
  }

  function store(obj) {
    let maps = JSON.parse(localStorage.getItem('simpleMaps'));
    let sMap = maps[map.id];

    Object.keys(obj).forEach(function (key) {
      sMap[key] = obj[key];
    });
    
    maps[map.id] = sMap;

    localStorage.setItem('simpleMaps', JSON.stringify(maps));
  }

  function share() {
    socket.send(JSON.stringify({ location_id: loc.id, map_id: map.id }));
  }

  function dropPins() {
    let items;
    let pin;
    let left;
    let top;
    let words;
    let pos;
    let pins = imgs.querySelectorAll('.pin:not(.template)');

    pins.forEach(function (pin) { pin.remove() });
    
    if (!map.pins) {
      return;
    }

    map.pins.forEach(function (item) {
      pos = img.getBoundingClientRect();
      
      left = (pos.width * item.x) + "px";
      top = (pos.height * item.y) + "px";

      pin = document.body.querySelector(".pin.template").cloneNode(true);

      words = pin.querySelector(".words");

      while (words.firstChild) {
        words.removeChild(words.firstChild);
      }

      words.appendChild(document.createTextNode(item.name));

      pin.id = "pin_" + item.key; 
      pin.style.left = left;
      pin.style.top = top;
      pin.classList.remove("template");

      imgs.appendChild(pin);
      
      pin.addEventListener("click", function(e) {
        let linkLink = msgs.querySelector("#link");
        let opened = msgs.querySelector("#bit-input_" + item.key);
        let title = msgs.querySelector(".msgs-title");
        
        while (title.firstChild) {
          title.removeChild(title.firstChild);
        }

        if (opened) {
          pinKey = null;
          pinName = null;
          bin.removeEventListener("keyup", addBit, true);
          bin.id = "bit-input"
          link.removeEventListener("click", startLinking, true);
          msgs.classList.add("hidden");
          fit();
        } else {
          title.appendChild(document.createTextNode("comments for: " + item.name));
          if (item.linked_location) {
            setLinkInfo(item.linked_location.name, item.linked_location.id);
          }
          pinKey = item.key;
          pinName = item.name;
          fillBits(item);
          bin.id = "bit-input_" + item.key;
          link.addEventListener("click", startLinking, true);
          bin.addEventListener("keyup", addBit, true);
          msgs.classList.remove("hidden");
          fit();
        }
      });

      // must get width after appending to the document
      pin.style.width = words.clientWidth + 10 + "px";
      nudge(pin);

      // fill comments if this pin's comments are visible
      let opened = msgs.querySelector("#bit-input_" + item.key);
      if (opened) {
        fillBits(item);
      }
    });
  }
  
  function myName() {
    let maps = JSON.parse(localStorage.getItem('simpleMaps'));

    if (!maps) {
      return null;
    }

    let sMap = maps[map.id];

    if (!sMap || !sMap.name) {
      return null;
    }
    
    return sMap.name;
  }
  
  function myKey() {
    let maps = JSON.parse(localStorage.getItem('simpleMaps'));

    if (!maps) {
      return null;
    }

    let sMap = maps[map.id];

    if (!sMap || !sMap.key) {
      return null;
    }
    
    return sMap.key;
  }

  function fillBits(pin) {
    while (bits.firstChild) {
      bits.removeChild(bits.firstChild);
    }

    pin.bits.forEach(function(b) {
      let bit = document.createElement("div");

      bit.classList.add("bit");
      
      let nameDiv = document.createElement("div");
      nameDiv.classList.add("bit-name");
      nameDiv.appendChild(document.createTextNode(b.name));
      
      let commentDiv = document.createElement("div");
      commentDiv.classList.add("bit-comment");
      commentDiv.appendChild(document.createTextNode(b.comment));
      
      bit.appendChild(nameDiv);
      bit.appendChild(commentDiv);
      
      bits.insertBefore(bit, bits.firstChild);
    });
  }

  function addBit(keyupEvent) {
    let comment = keyupEvent.target.value;
    
    if (!pinKey || !pinName || !myKey() || !myName()) {
      alert("You don't yet have a name on this map...try dropping a pin before commenting!");
      return;
    }

    if (event.code == "Enter") {
      if (comment.length > 0) {
        bin.value = "";
        bin.blur();
            
        sned(pinKey, pinName, null, null, comment, myKey(), myName(), function(response) {
          share();
        });
      }
    }
  }

  function initializeMapStorage() {
    localStorage.setItem('simpleMaps', JSON.stringify({}));
    return {};
  }
</script>

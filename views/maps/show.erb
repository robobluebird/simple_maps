<script>
  let map;
  let img;
  let bag;
</script>

<h1>
  <%= @map.name %>
</h1>

<div class="img">
  <img id="img" src="<%= @url %>"></img>
</div>

<div class="pin template">
  <div class="inner-rectangle">
    <span class="words">asdfasfdasdfasdf</span>
    <input class="name-input inactive" type="text" placeholder="name..." />
  </div>
  <div class="outer-triangle">
  </div>
  <div class="inner-triangle">
  </div>
</div>

<script type="text/javascript" src="/javascripts/guid.js"></script>
<script>
  function fit() {
    let bagPos = bag.getBoundingClientRect();

    if (bagPos.width > bagPos.height) {
      img.classList.remove('tall');
      img.classList.add('wide');
    } else {
      img.classList.remove('wide');
      img.classList.add('tall');
    }

    dropPins();
  }

  window.onload = function() {
    map = JSON.parse('<%= @map.to_json %>');
    map.id = map["_id"]["$oid"];

    bag = document.querySelector(".img")
    img = document.querySelector("#img");

    fit();

    window.onresize = fit;

    img.addEventListener('click', (event) => {
      let maps = JSON.parse(localStorage.getItem('simpleMaps'));

      if (!maps) {
        maps = initializeMapStorage();
      }

      let sMap = maps[map.id];

      if (!sMap) {
        let guid = Guid.newGuid();

        sMap = {
          key: guid,
          name: null
        };

        maps[map.id] = sMap;

        localStorage.setItem('simpleMaps', JSON.stringify(maps));
      }

      console.log(sMap);

      let currentPin = document.querySelector('#pin_' + sMap.key);

      drawPin(event, sMap.key, sMap.name, currentPin);
    });
  };

  function drawPin(event, guid, name, pin) {
    console.log(event);
    let xPercent = event.offsetX / img.width;
    let yPercent = event.offsetY / img.height;

    console.log(event.offsetX);
    console.log(event.offsetY);

    // 27 and 35 are offsets for the origin of the box vs the
    // "correct" position
    let pos = img.getBoundingClientRect();
    let left = ((pos.x + window.scrollX) + (img.width * xPercent) - 27) + "px";
    let top = ((pos.y + window.scrollY) + (img.height * yPercent) - 35) + "px";

    console.log(left);
    console.log(top);

    if (pin) {
      pin.style.left = left;
      pin.style.top = top;

      var xhr = new XMLHttpRequest();

      xhr.open("POST", '/maps/' + map.id + '/pins', true);
      xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      xhr.onreadystatechange = function() { // Call a function when the state changes.
        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
          console.dir(this.response);
        }
      }
      xhr.send("name=" + name + "&guid=" + guid + "&x=" + xPercent + "&y= " + yPercent);
    } else {
      let pin = document.querySelector('.pin.template').cloneNode(true);
      let words = pin.querySelector('.words');

      while (words.firstChild) {
        words.removeChild(words.firstChild);
      }

      pin.classList.remove("template");
      pin.id = 'pin_' + guid; 
      pin.style.left = left;
      pin.style.top = top;
      pin.style.display = "block";

      if (name) {
        console.log('rep');
        words.appendChild(document.createTextNode(name));
        bag.appendChild(pin);
        pin.style.width = words.clientWidth + 10 + "px";

        var xhr = new XMLHttpRequest();
        xhr.open("POST", '/maps/' + map.id + '/pins', true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function() { // Call a function when the state changes.
          if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
            console.dir(this.response);
          }
        }
        xhr.send("name=" + name + "&guid=" + guid + "&x=" + xPercent + "&y= " + yPercent);
      } else {
        let input = pin.querySelector('input');

        let keyup = function(event) {
          let name = input.value;

          if (event.code == "Enter") {
            if (name.length > 0) {
              var xhr = new XMLHttpRequest();
              xhr.open("POST", '/maps/' + map.id + '/pins', true);
              xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
              xhr.onreadystatechange = function() { // Call a function when the state changes.
                if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                  store({ name: name });

                  input.removeEventListener("keyup", keyup, true);
                  input.classList.add("inactive");
                  words.style.display = "block";
                  words.appendChild(document.createTextNode(name));
                  pin.style.width = words.clientWidth + 10 + "px";
                }
              }
              xhr.send("name=" + name + "&guid=" + guid + "&x=" + xPercent + "&y= " + yPercent);
            }
          }
        };

        input.addEventListener("keyup", keyup, true);
        words.style.display = "none";
        input.classList.remove("inactive");
        pin.style.width = "100px";
        bag.appendChild(pin);
      }
    }
  }

  function store(obj) {
    let maps = JSON.parse(localStorage.getItem('simpleMaps'));
    let sMap = maps[map.id];

    Object.keys(obj).forEach(function (key) {
      sMap[key] = obj[key];
    });

    localStorage.setItem('simpleMaps', JSON.stringify(maps));
  }

  function dropPins() {
    let items;
    let pin;
    let left;
    let top;
    let words;
    let pos;
    let pins = document.querySelectorAll('.pin:not(.template)');

    pins.forEach(function (pin) { pin.remove() });

    map.pins.forEach(function (item) {
      pos = img.getBoundingClientRect();
      left = (pos.x + (img.width * item.x) - 27) + "px";
      top = (pos.y + (img.height * item.y) - 35) + "px";

      pin = document.querySelector(".pin.template").cloneNode(true);

      words = pin.querySelector(".words");

      while (words.firstChild) {
        words.removeChild(words.firstChild);
      }

      words.appendChild(document.createTextNode(item.name));

      pin.id = "pin_" + item.guid; 
      pin.style.left = left;
      pin.style.top = top;
      pin.classList.remove("template");

      bag.appendChild(pin);

      // must get width after appending to the document
      pin.style.width = words.clientWidth + 10 + "px";
    });
  }

  function initializeMapStorage() {
    localStorage.setItem('simpleMaps', JSON.stringify({}));
    return {};
  }
</script>

<script>
  let map;
  let img;
  let bag;
  let socket;
</script>

<img id="img" src="<%= @url %>"></img>

<div class="pin template">
  <div class="inner-rectangle">
    <span class="words">asdfasfdasdfasdf</span>
    <input class="name-input inactive" type="text" placeholder="name..." />
  </div>
  <div class="outer-triangle">
  </div>
  <div class="inner-triangle">
  </div>
</div>

<script type="text/javascript" src="/javascripts/guid.js"></script>
<script>
  function fit() {
    let bagPos = bag.getBoundingClientRect();

    if (bagPos.width > bagPos.height) {
      img.classList.remove('tall');
      img.classList.add('wide');
      bag.classList.remove('no-vert-scroll');
      bag.classList.add('no-horz-scroll');
    } else {
      img.classList.remove('wide');
      img.classList.add('tall');
      bag.classList.remove('no-horz-scroll');
      bag.classList.add('no-vert-scroll');
    }

    dropPins();
  }

  window.onload = function() {
    map = JSON.parse('<%= @map.to_json %>');
    map.id = map["_id"]["$oid"];
    img = document.body.querySelector("#img");

    img.addEventListener('click', (event) => {
      let maps = JSON.parse(localStorage.getItem('simpleMaps'));

      if (!maps) {
        maps = initializeMapStorage();
      }

      let sMap = maps[map.id];

      if (!sMap) {
        let key = Guid.newGuid();

        sMap = {
          key: key,
          name: null
        };

        maps[map.id] = sMap;

        localStorage.setItem('simpleMaps', JSON.stringify(maps));
      }

      console.log(sMap);

      let currentPin = document.body.querySelector('#pin_' + sMap.key);

      drawPin(event, sMap.key, sMap.name, currentPin);
    });

    socket = new WebSocket("<%= @ws_url %>");

    socket.addEventListener('open', function (event) {
      console.log("ws...g2g!");
    });

    socket.addEventListener('message', function (event) {
      data = JSON.parse(event.data);

      if (data.map) {
        map = data.map;
        map.id = data["map"]["_id"]["$oid"];
      }

      let maps = JSON.parse(localStorage.getItem('simpleMaps'));

      if (data.id && maps) {
        let sMap = maps[data.id];

        if (sMap) {
          console.log(sMap.key + " vs " + data.key);

          if (sMap.key != data.key) {
            console.log("modifying pin...");

            let pin = document.body.querySelector('#pin_' + data.key);

            drawPin({ trueX: data.x, trueY: data.y }, data.key, data.name, pin, false);
          } else {
            console.log("we sent this message so don't update");
          }
        }
      }
    });

    dropPins();
  };

  function nudge(pin, y = true) {
    let words = pin.querySelector('.words');
    let outerTriangle = pin.querySelector('.outer-triangle');
    let innerTriangle = pin.querySelector('.inner-triangle');

    let pinPos = pin.getBoundingClientRect();
    let triPos = outerTriangle.getBoundingClientRect();
    let driPos = innerTriangle.getBoundingClientRect();

    if (y) {
      pin.style.top = (pinPos.top - (pinPos.height + triPos.height)) + "px";
      pin.style.left = pinPos.left - (pinPos.width / 2) + "px";
    } else {
      pin.style.left = ((triPos.left + (triPos.width / 2)) - (pinPos.width / 2)) + "px";
    }

    outerTriangle.style.left = ((pinPos.width / 2) - (triPos.width / 2)) + "px"
    innerTriangle.style.left = ((pinPos.width / 2) - (driPos.width / 2)) + "px"
  }

  function drawPin(event, key, name, pin, persist = true) {
    let xPercent;
    let yPercent;
    let pos = img.getBoundingClientRect();

    if (event.trueX && event.trueY) {
      xPercent = event.trueX;
      yPercent = event.trueY;
    } else {
      xPercent = (event.pageX - pos.x) / img.width;
      yPercent = (event.pageY - pos.y)  / img.height;
    }

    let left = ((pos.x + window.scrollX) + (img.width * xPercent)) + "px";
    let top =  ((pos.y + window.scrollY) + (img.height * yPercent)) + "px";

    if (pin) {
      pin.style.left = left;
      pin.style.top = top;

      nudge(pin);

      if (!persist) {
        console.log("not persisting...");
        return;
      } else {
        console.log("persisting!");
      }

      var xhr = new XMLHttpRequest();

      sned(key, name, xPercent, yPercent, function(response) {
        console.dir(response);
        share(key, name, xPercent, yPercent);
      });
    } else {
      let pin = document.querySelector('.pin.template').cloneNode(true);
      let words = pin.querySelector('.words');

      while (words.firstChild) {
        words.removeChild(words.firstChild);
      }

      pin.classList.remove("template");
      pin.id = 'pin_' + key; 
      pin.style.left = left;
      pin.style.top = top;
      pin.style.display = "block";

      if (name) {
        words.appendChild(document.createTextNode(name));
        document.body.appendChild(pin);
        pin.style.width = words.clientWidth + 10 + "px";
        nudge(pin);

        if (!persist) {
          console.log("not persisting...");
          return;
        } else {
          console.log("persisting!");
        }

        sned(key, name, xPercent, yPercent, function(response) {
          console.dir(response);
          share(key, name, xPercent, yPercent);
        });
      } else {
        if (!persist) {
          console.log("not persisting but never should have got here anyway...");
          return;
        } else {
          console.log("persisting! ...oh no");
        }

        let input = pin.querySelector('input');

        let keyup = function(event) {
          let name = input.value;

          if (event.code == "Enter") {
            if (name.length > 0) {
              sned(key, name, xPercent, yPercent, function(response) {
                console.dir(response);

                store({ name: name });

                input.removeEventListener("keyup", keyup, true);
                input.classList.add("inactive");
                words.style.display = "block";
                words.style.width = "fit-content";
                words.appendChild(document.createTextNode(name));
                pin.style.width = words.clientWidth + 10 + "px";
                nudge(pin, false);

                share(key, name, xPercent, yPercent);
              });
            }
          }
        };

        input.addEventListener("keyup", keyup, true);
        words.style.display = "none";
        input.classList.remove("inactive");
        input.focus();
        pin.style.width = "200px";
        document.body.appendChild(pin);
        nudge(pin);
      }
    }
  }

  function sned(key, name, x, y, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", '/maps/' + map.id + '/pins', true);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.onreadystatechange = function() { // Call a function when the state changes.
      if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
        let r = JSON.parse(this.response);
        map = r.map;
        map.id = map["_id"]["$oid"];
        callback(r);
      }
    }
    xhr.send("name=" + name + "&key=" + key + "&x=" + x + "&y= " + y);
  }

  function store(obj) {
    let maps = JSON.parse(localStorage.getItem('simpleMaps'));
    let sMap = maps[map.id];

    Object.keys(obj).forEach(function (key) {
      sMap[key] = obj[key];
    });
    
    maps[map.id] = sMap;

    localStorage.setItem('simpleMaps', JSON.stringify(maps));
  }

  function share(key, name, x, y) {
    if (key && x && y && socket && map) {
      let data = JSON.stringify({id: map.id, name: name, key: key, x: x, y: y});

      socket.send(data);
    }
  }

  function dropPins() {
    let items;
    let pin;
    let left;
    let top;
    let words;
    let pos;
    let pins = document.body.querySelectorAll('.pin:not(.template)');

    pins.forEach(function (pin) { pin.remove() });
    
    if (!map.pins) {
      return;
    }

    map.pins.forEach(function (item) {
      pos = img.getBoundingClientRect();
      console.log(pos);
      left = (pos.x + (img.width * item.x)) + "px";
      top =  (pos.y + (img.height * item.y)) + "px";

      pin = document.querySelector(".pin.template").cloneNode(true);

      words = pin.querySelector(".words");

      while (words.firstChild) {
        words.removeChild(words.firstChild);
      }

      words.appendChild(document.createTextNode(item.name));

      pin.id = "pin_" + item.key; 
      pin.style.left = left;
      pin.style.top = top;
      pin.classList.remove("template");

      document.body.appendChild(pin);

      // must get width after appending to the document
      pin.style.width = words.clientWidth + 10 + "px";
      nudge(pin);
    });
  }

  function initializeMapStorage() {
    localStorage.setItem('simpleMaps', JSON.stringify({}));
    return {};
  }
</script>

<script>
  let map;
  let img;
  let box;
  let socket;
  let msgs;
  let imgs;
  let bits;
</script>

<div class="box">
  <div class="msgs hidden">
    <textarea class="bit-input" id="bit-input"></textarea>
    <div class="bits">
    </div>
  </div>
  <div class="imgs">
    <img id="img" src="<%= @url %>"></img>
  </div>
</div>

<div class="pin template">
  <div class="inner-rectangle">
    <span class="words">asdfasfdasdfasdf</span>
    <input class="name-input inactive" type="text" placeholder="name..." />
  </div>
  <div class="outer-triangle">
  </div>
  <div class="inner-triangle">
  </div>
</div>

<script type="text/javascript" src="/javascripts/guid.js"></script>
<script>
  window.onload = function() {
    let mapId = "<%= @map.id %>";
    
    getMap(mapId, function(fetchedMap) {
      map = fetchedMap;
      map.id = map["_id"]["$oid"];

      if (!map.pins) {
        map.pins = [];
      }

      map.pins.forEach(function(p) {
        if (!p.bits) {
          p.bits = [];
        }
      });
      
      box = document.body.querySelector(".box");
      imgs = box.querySelector(".imgs");
      img = imgs.querySelector("#img");
      msgs = box.querySelector(".msgs");
      bits = msgs.querySelector(".bits");
      bin = msgs.querySelector("#bit-input");
    
      fit();
    
      window.onresize = fit;

      img.addEventListener('click', (event) => {
        let maps = JSON.parse(localStorage.getItem('simpleMaps'));

        if (!maps) {
          maps = initializeMapStorage();
        }

        let sMap = maps[map.id];

        if (!sMap) {
          let key = Guid.newGuid();

          sMap = {
            key: key,
            name: null
          };

          maps[map.id] = sMap;

          localStorage.setItem('simpleMaps', JSON.stringify(maps));
        }

        let currentPin = imgs.querySelector('#pin_' + sMap.key);

        drawPin(event, sMap.key, sMap.name, currentPin);
      });

      socket = new WebSocket("<%= @ws_url %>");

      socket.addEventListener('open', function (event) {
        console.log("ws...g2g!");
      });

      socket.addEventListener('message', function (event) {
        data = JSON.parse(event.data);

        if (data.map) {
          map = data.map;
          map.id = data["map"]["_id"]["$oid"];

          if (!map.pins) {
            map.pins = [];
          }

          map.pins.forEach(function(p) {
            if (!p.bits) {
              p.bits = [];
            }
          });
        }
      
        dropPins();
      });

      dropPins();
    });
  };
  
  function fit() {
    if (window.innerWidth > window.innerHeight) {
      box.classList.remove("tall");
      box.classList.add("wide");
      msgs.classList.remove("tall");
      msgs.classList.add("wide");
    } else {
      box.classList.remove("wide");
      box.classList.add("tall");
      msgs.classList.remove("wide");
      msgs.classList.add("tall");
    }

    dropPins();
  }
  
  function getMap(mapId, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "/maps/" + mapId);
    xhr.setRequestHeader("Accept", "application/json");
    xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest");
    xhr.onreadystatechange = function() {
      if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
        console.log(this.response);
        callback(JSON.parse(this.response).map);
      }
    }
    xhr.send();
  }

  function nudge(pin, y = true) {
    let words = pin.querySelector('.words');
    let outerTriangle = pin.querySelector('.outer-triangle');
    let innerTriangle = pin.querySelector('.inner-triangle');

    let pinPos = pin.getBoundingClientRect();
    let triPos = outerTriangle.getBoundingClientRect();
    let driPos = innerTriangle.getBoundingClientRect();
    
    let pinLeft = parseFloat(pin.style.left.slice(0, -2));
    let pinTop = parseFloat(pin.style.top.slice(0, -2));
    let triLeft = parseFloat(outerTriangle.style.left.slice(0, -2));

    if (y) {
      pin.style.top = (pinTop - (pinPos.height + triPos.height)) + "px";
      pin.style.left = (pinLeft - (pinPos.width / 2)) + "px";
    } else {
      pin.style.left = ((triLeft + (triPos.width / 2)) - (pinPos.width / 2)) + "px";
    }

    outerTriangle.style.left = ((pinPos.width / 2) - (triPos.width / 2)) + "px"
    outerTriangle.style.top = pinPos.height - 1 + "px";
    innerTriangle.style.left = ((pinPos.width / 2) - (driPos.width / 2)) + "px"
    innerTriangle.style.top = pinPos.height - 2 + "px";
  }

  function pinPos(pin) {
    let outerTriangle = pin.querySelector('.outer-triangle');
    let pinPos = pin.getBoundingClientRect();
    let triPos = outerTriangle.getBoundingClientRect();

    return {
      x: pinPos.x + (pinPos.width / 2),
      y: pinPos.top + (pinPos.height + triPos.height)
    };
  }

  function drawPin(event, key, name, pin, persist = true) {
    let xPercent;
    let yPercent;
    let left;
    let top;

    if (event.trueX && event.trueY) {
      xPercent = event.trueX;
      yPercent = event.trueY;
      console.log("trueX");
      console.log(xPercent);
      console.log(yPercent);
    } else {
      xPercent = event.offsetX / img.width;
      yPercent = event.offsetY  / img.height;
      console.log("offsetX");
      console.log(xPercent);
      console.log(yPercent);
    }

    if (pin && name) {
      if (!persist) {
        console.log("not persisting...");
        return;
      } else {
        console.log("persisting!");
      }

      sned(key, name, xPercent, yPercent, null, function(response) {
        console.dir(response);
        share(key, name, xPercent, yPercent, null);
      });
    } else {
      if (name) {
        if (!persist) {
          console.log("not persisting...");
          return;
        } else {
          console.log("persisting!");
        }

        sned(key, name, xPercent, yPercent, null, function(response) {
          share(key, name, xPercent, yPercent, null);
        });
      } else {
        console.log("naming...");

        pin = imgs.querySelector("#pin_" + key);

        if (pin) {
          pin.remove();
        }

        pin = document.body.querySelector('.pin.template').cloneNode(true);

        let words = pin.querySelector('.words');
        while (words.firstChild) {
          words.removeChild(words.firstChild);
        }
        words.style.display = "none";

        pin.classList.remove("template");
        pin.id = 'pin_' + key; 
        pin.style.width = "200px";
        pin.style.display = "block";

        left = (window.scrollX + img.width * xPercent) + "px";
        top = (window.scrollY + img.height * yPercent) + "px";

        pin.style.left = left;
        pin.style.top = top;

        let input = pin.querySelector('input');

        let keyup = function(event) {
          let name = input.value;

          if (event.code == "Enter") {
            if (name.length > 0) {
              sned(key, name, xPercent, yPercent, null, function(response) {
                store({ name: name });
                share(key, name, xPercent, yPercent, null);
              });
            }
          }
        };

        input.addEventListener("keyup", keyup, true);
        input.classList.remove("inactive");
        imgs.appendChild(pin);
        input.focus();
        nudge(pin);
      }
    }
  }

  function sned(key, name, x, y, comment, callback) {
    if (x && y) {
      // optimistically drop pins to keep things snappy

      let pin = map.pins.find(function(pin) {
        return pin.key === key;
      });
      
      if (pin) {
        pin.x = x;
        pin.y = y;
        pin.name = name;
      }
      
      dropPins();
    }
    
    var xhr = new XMLHttpRequest();
    xhr.open("POST", '/maps/' + map.id + '/pins', true);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.onreadystatechange = function() { // Call a function when the state changes.
      if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
        let response = JSON.parse(this.response);
        map = response.map;
        map.id = map["_id"]["$oid"];

        if (!map.pins) {
          map.pins = [];
        }

        map.pins.forEach(function(p) {
          if (!p.bits) {
            p.bits = [];
          }
        });
        
        // inefficient with the current state of drawPin BUT it's a test
        dropPins();
        
        callback(response);
      }
    }
    
    let params = "name=" + name + "&key=" + key;
    
    if (x && y) {
      params += ("&x=" + x + "&y=" + y);
    } else if (comment) {
      params += ("&comment=" + comment);
    } else {
      throw new Error("you really messed up here");
    }
    
    xhr.send(params);
  }

  function store(obj) {
    let maps = JSON.parse(localStorage.getItem('simpleMaps'));
    let sMap = maps[map.id];

    Object.keys(obj).forEach(function (key) {
      sMap[key] = obj[key];
    });
    
    maps[map.id] = sMap;

    localStorage.setItem('simpleMaps', JSON.stringify(maps));
  }

  function share(key, name, x, y, comment) {
    let data;

    if (key && socket && map) {
      if (x && y) {
        data = JSON.stringify({id: map.id, name: name, key: key, x: x, y: y});
      } else if (comment) {
        data = JSON.stringify({id: map.id, name: name, key: key, comment: comment});
      } else {
        throw new Error("this couldn't happen...");
      }

      socket.send(data);
    }
  }

  function dropPins() {
    let items;
    let pin;
    let left;
    let top;
    let words;
    let pos;
    let pins = imgs.querySelectorAll('.pin:not(.template)');

    pins.forEach(function (pin) { pin.remove() });
    
    if (!map.pins) {
      return;
    }

    map.pins.forEach(function (item) {
      pos = img.getBoundingClientRect();
      
      left = (pos.width * item.x) + "px";
      top = (pos.height * item.y) + "px";

      pin = document.body.querySelector(".pin.template").cloneNode(true);

      words = pin.querySelector(".words");

      while (words.firstChild) {
        words.removeChild(words.firstChild);
      }

      words.appendChild(document.createTextNode(item.name));

      pin.id = "pin_" + item.key; 
      pin.style.left = left;
      pin.style.top = top;
      pin.classList.remove("template");

      imgs.appendChild(pin);

      let keyup = function(e) {
        let comment = bin.value;

        if (event.code == "Enter") {
          if (comment.length > 0) {
            sned(item.key, item.name, null, null, comment, function(response) {
              bin.value = "";
              bin.blur()
              share(item.key, item.name, null, null, comment);
            });
          }
        }
      }
      
      pin.addEventListener("click", function(e) {
        let opened = msgs.querySelector("#bit-input_" + item.key);

        if (opened) {
          bin.removeEventListener("keyup", keyup, true);
          bin.id = "bit-input"
          msgs.classList.add("hidden");
        } else {
          fillBits(item);
          bin.id = "bit-input_" + item.key;
          bin.addEventListener("keyup", keyup, true);
          msgs.classList.remove("hidden");
        }
      });

      // must get width after appending to the document
      pin.style.width = words.clientWidth + 10 + "px";
      nudge(pin);

      // fill comments if this pin's comments are visible
      let opened = msgs.querySelector("#bit-input_" + item.key);
      if (opened) {
        fillBits(item);
      }
    });
  }

  function fillBits(pin) {
    while (bits.firstChild) {
      bits.removeChild(bits.firstChild);
    }

    pin.bits.forEach(function(b) {
      let bit = document.createElement("div");

      bit.classList.add("bit");
      bit.appendChild(document.createTextNode(b.comment));
      bits.insertBefore(bit, bits.firstChild);
    });
  }

  function addBit(e, key, name) {
  }

  function initializeMapStorage() {
    localStorage.setItem('simpleMaps', JSON.stringify({}));
    return {};
  }
</script>

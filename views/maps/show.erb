<h1 style="text-shadow: 4px 3px 0 #FFFFFF, 2px 2px 2px rgba(206,89,55,0);">
  <%= @map.name %>
</h1>

<img onload="dropPins()" class="img" src="<%= @url %>"></img>

<script type="text/javascript" src="/javascripts/guid.js"></script>
<script>
  let img = document.querySelector('.img');

  function drawPin(event, guid, name, pin) {
    let xPercent = event.offsetX / img.width;
    let yPercent = event.offsetY / img.height;

    // xPercent and yPercent are the exact pin location but 
    // those spots must be massaged to accomdate the height and width
    // of the pin graphic

    let pos = img.getBoundingClientRect();
    let left = (pos.x + (img.width * xPercent) - 27) + "px";
    let top = (pos.y + (img.height * yPercent) - 35) + "px";

    if (pin) {
      pin.style.left = left;
      pin.style.top = top;
    } else {
      let pin = document.querySelector('.pin.template').cloneNode(true);
      let words = pin.querySelector('.words');

      while (words.firstChild) {
        words.removeChild(words.firstChild);
      }

      pin.classList.remove("template");
      pin.id = 'pin_' + guid; 
      pin.style.left = left;
      pin.style.top = top;
      pin.style.display = "block";

      if (name) {
        words.appendChild(document.createTextNode(pin.name));
        document.body.appendChild(pin);
        pin.style.width = words.clientWidth + "px";

        var xhr = new XMLHttpRequest();
        xhr.open("POST", '/maps/<%= @map.id %>/pins', true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function() { // Call a function when the state changes.
          if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
            console.dir(this.response);
          }
        }
        xhr.send("name=" + name + "&guid=" + guid + "&x=" + xPercent + "&y= " + yPercent);
      } else {
        let input = pin.querySelector('input');

        let keyup = function(event) {
          let name = input.value;

          if (event.code == "Enter") {
            if (name.length > 0) {
              var xhr = new XMLHttpRequest();
              xhr.open("POST", '/maps/<%= @map.id %>/pins', true);
              xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
              xhr.onreadystatechange = function() { // Call a function when the state changes.
                if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                  let maps = JSON.parse(localStorage.getItem('simpleMaps'));
                  let map = maps[MAP_ID];
                  map['name'] = name;
                  maps[MAP_ID] = map;
                  localStorage.setItem('simpleMaps', JSON.stringify(maps));

                  input.removeEventListener("keyup", keyup, true);
                  input.classList.add("inactive");
                  words.style.display = "block";
                  words.appendChild(document.createTextNode(name));
                  pin.style.width = words.clientWidth + "px";
                }
              }
              xhr.send("name=" + name + "&guid=" + guid + "&x=" + xPercent + "&y= " + yPercent);
            }
          }
        };

        input.addEventListener("keyup", keyup, true);
        words.style.display = "none";
        input.classList.remove("inactive");
        pin.style.width = "100px";
        document.body.appendChild(pin);
      }
    }
  }

  function dropPins(items = []) {
    let pins = document.querySelectorAll('.pin:not(.template)');
    pins.forEach(function (pin) { pin.remove() });

    let pin;
    let left;
    let top;
    let words;
    let pos;

    items.forEach(function (item) {
      // xPercent and yPercent are the exact pin location but 
      // those spots must be massaged to accomdate the height and width
      // of the pin graphic
      pos = img.getBoundingClientRect();
      left = (pos.x + (img.width * pin.x) - 27) + "px";
      top = (pos.y + (img.height * pin.y) - 35) + "px";

      pin = document.querySelector(".pin.template").cloneNode(true);

      words = pin.querySelector(".words");

      while (words.firstChild) {
        words.removeChild(words.firstChild);
      }

      words.appendChild(document.createTextNode(pin.name));

      pin.id = 'pin_' + guid; 
      pin.style.left = left + "px";
      pin.style.top = top + "px";
      pin.classList.remove("template");
      pin.display = "block";

      document.body.appendChild(pin);

      // must get width after appending to the document
      pin.style.width = words.clientWidth + "px";
    });
  }

  function initializeMapStorage() {
    localStorage.setItem('simpleMaps', JSON.stringify({}));
    return {};
  }

  img.addEventListener('click', (event) => {
    let maps = JSON.parse(localStorage.getItem('simpleMaps'));

    if (!maps) {
      maps = initializeMapStorage();
    }

    let map = maps["<%= @map.id %>"];

    if (!map) {
      let guid = Guid.newGuid();

      map = {
        key: guid,
        name: null
      };

      maps["<%= @map.id %>"] = map;

      localStorage.setItem('simpleMaps', JSON.stringify(maps));
    }

    let currentPin = document.querySelector('#pin_' + map.key);

    drawPin(event, map.key, map.name, currentPin);
  });
</script>

<div class="pin template">
  <div class="inner-rectangle">
    <span class="words">asdfasfdasdfasdf</span>
    <input class="name-input inactive" type="text" placeholder="name..." />
  </div>
  <div class="outer-triangle">
  </div>
  <div class="inner-triangle">
  </div>
</div>
